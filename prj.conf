CONFIG_GPIO=y
CONFIG_LOG=y
CONFIG_HEAP_MEM_POOL_SIZE=16384
CONFIG_DISPLAY_LOG_LEVEL_INF=y

CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE=4096
CONFIG_MAIN_STACK_SIZE=8192

CONFIG_GENERIC_EPAPER=y

#Uncomment these for RTT shell/console/logs
CONFIG_RTT_CONSOLE=y
CONFIG_USE_SEGGER_RTT=y
CONFIG_SHELL_BACKEND_RTT=y

# Uncomment these for UART shell/console/logs
#CONFIG_USE_SEGGER_RTT=n
#CONFIG_UART_CONSOLE=y
#CONFIG_SHELL_BACKEND_SERIAL=y
#CONFIG_LOG_BACKEND_UART=y

#CONFIG_SHELL_BACKEND_SERIAL=y

CONFIG_SHELL_LOG_BACKEND=y
CONFIG_SHELL_STACK_SIZE=8192
#CONFIG_LOG_BACKEND_UART=y
#CONFIG_USE_SEGGER_RTT=n

CONFIG_LOG_BUFFER_SIZE=8096
#openthread logging is super noisy because platform/logging.c doesn't dynamically set LOG_LEVEL: #define LOG_LEVEL LOG_LEVEL_DBG
#CONFIG_LOG_DEFAULT_LEVEL=4
#CONFIG_LOG_MAX_LEVEL=4

CONFIG_SHELL=y

CONFIG_NETWORKING=y
CONFIG_NET_SHELL=y
CONFIG_NET_L2_OPENTHREAD=y

CONFIG_OPENTHREAD_SYS_INIT=y
CONFIG_OPENTHREAD_MANUAL_START=y
CONFIG_OPENTHREAD_SHELL=y
CONFIG_OPENTHREAD_PING_SENDER=y
CONFIG_OPENTHREAD_SLAAC=y
CONFIG_OPENTHREAD_THREAD_VERSION_1_3=y

#CONFIG_OPENTHREAD_DEBUG=y
#CONFIG_OPENTHREAD_FULL_LOGS=y
#CONFIG_OPENTHREAD_LOG_LEVEL_INFO=y
#CONFIG_OPENTHREAD_L2_DEBUG=n
#CONFIG_OPENTHREAD_L2_LOG_LEVEL_INF=y

# Disable openthread using the zephyr settings API for data storage.
# It writes every time it tries to connect to the network, which is unacceptable
# for write endurance. Maybe if we hook up external flash and use zms / littlefs there,
# it would be OK. For now though, we'll just inject the dataset and everything else
# can be in RAM. This probably means initial connection to the network will take slightly longer.
# But we can't quite do that, since CONFIG_OPENTHREAD_PSA_NVM_BACKEND_ITS winds up being set which stores things in settings _anyways_...
# can we turn that off?
#CONFIG_OPENTHREAD_SETTINGS_RAM=y
#CONFIG_OPENTHREAD_CRYPTO_PSA=n

CONFIG_OPENTHREAD_MTD=y

CONFIG_NCS_APPLICATION_BOOT_BANNER_STRING="epaper-thingy"

# rram will eventually wear out. We write ~38 bytes per boot (plus a little bit more)
# ((4096-80) x 8 x 10000) / 38 = 8454736 boots before we exhaust RRAM.
# even waking every minute that's 18 years before things break.
# in practice, we'll wake every like 6 hours so it'll last well past the expected life of the device.

# https://devzone.nordicsemi.com/f/nordic-q-a/117093/how-to-configure-settings-api-to-work-on-a-specific-partition-defined-in-the-pm_static-yaml-file
# suggests building then renaming to pm_static.yaml.
# (it's in build/partitions.yaml)
# This seems dumb. Why can't I use DT to define it??

CONFIG_MCUBOOT_IMG_MANAGER=y
CONFIG_IMG_MANAGER=y
CONFIG_IMG_MANAGER_LOG_LEVEL_DBG=y
# MCUBOOT_BOOTUTIL_LIB

CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE=0x8000

CONFIG_COAP=y
CONFIG_COAP_CLIENT=y
CONFIG_COAP_LOG_LEVEL_INF=y
CONFIG_COAP_CLIENT_STACK_SIZE=4096

CONFIG_NET_LOG=y

CONFIG_NET_UDP=y
CONFIG_NET_SOCKETS=y
CONFIG_NET_CONNECTION_MANAGER=y

CONFIG_IMG_BLOCK_BUF_SIZE=512

# CONFIG_SETTINGS_ZMS_SECTOR_COUNT
# CONFIG_SETTINGS_ZMS_CUSTOM_SECTOR_COUNT

CONFIG_FLASH=y
CONFIG_FLASH_MAP=y
CONFIG_STREAM_FLASH=y
CONFIG_NVS=n
CONFIG_SETTINGS=y
CONFIG_SETTINGS_RUNTIME=y
#CONFIG_SETTINGS_NVS=y
#CONFIG_NVS_LOG_LEVEL_DBG=y
CONFIG_SETTINGS_ZMS=y
CONFIG_ZMS=y
CONFIG_ZMS_LOG_LEVEL_DBG=y
CONFIG_ZMS_LOOKUP_CACHE=y
CONFIG_ZMS_LOOKUP_CACHE_FOR_SETTINGS=y
CONFIG_ZMS_NO_DOUBLE_WRITE=y
CONFIG_SETTINGS_LOG_LEVEL_DBG=y
CONFIG_SETTINGS_ZMS_MAX_COLLISIONS_BITS=4
CONFIG_SETTINGS_SHELL=y
CONFIG_SETTINGS_LOG_LEVEL_DBG=y

# enable uart driver
CONFIG_SERIAL=y
# enable console
CONFIG_CONSOLE=y

CONFIG_ZCBOR=y
CONFIG_ZCBOR_CANONICAL=y

CONFIG_UART_CONSOLE_LOG_LEVEL_DBG=y

CONFIG_WATCHDOG=y
CONFIG_WDT_DISABLE_AT_BOOT=y
CONFIG_SENSOR=y
CONFIG_SENSOR_SHELL=y
CONFIG_REGULATOR=y
CONFIG_REGULATOR_SHELL=n
CONFIG_HW_ID_LIBRARY=y

CONFIG_I2C_LOG_LEVEL_INF=y